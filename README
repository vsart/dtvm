DTVM
A toy VM implemented in C++

This project is licensed under the terms of the MIT License.
See the LICENSE file for further details.

1. Usage

./dtvm [source] [options...]

Options:

        -no-acc | -no-ansi-color-codes
        Tells the application not to use ANSI color codes on outputs

        -parse-and-print
        Makes it so the application only parses the code and print
        the interpreted version to the stdout, not executing it.
        The only difference between the printed code from the source
        is that there are no empty lines, labels or comments, and
        j** instructions hold the index to be jumped to as their
        arguments.

2. Instructions

halt
        Halts execution of the VM
noop
        No operations happen

mov     r1      r2
        Copies the value of r1 into r2
push    r1
        Push value of r1 into the top of the stack
pop     r1
        Pops the top of the stack into r1

add
        Adds value of r1 to r2
sub
        Subtracts value of r1 from r2
mul
        Multiplies value of r2 by r1
div
        Divides r2 by r1

mod     r1      r2
        Modulo operation of r2 by r1

cil     lit     r2
        Sets the value of r2 to match the integer literal lit
cfl     lit     r2
        Sets the value of r2 to match the floating point literal lit

ofv     r1
        Output formatted value of r1 to stdout
onl
        Print newline and flush stdout

cmp     r1      r2
        Compare r1 and r2
cmpz    r1
        Compare r1 to the appropriate zero

jmp     lab
        Jumps uncoditionally to label lab
jgt     lab
        Jumps to label lab last comparison was `true` for `>`
jeq     lab
        Jumps to label lab last comparison was `true` for `=`
jlt     lab
        Jumps to label lab last comparison was `true` for `<`

3. Labels and Comments

Comments start with ';', and they can either start at the beginning
of a line or in the end of a line after a full instruction (the
instruction token and the arguments).

Label declarations need to be alone in a line. Since a `halt`
instruction is always added to the end of the code, a label declared
in the end of a file will reference a `halt` instruction.
A label needs to start with `@` and not contain any whitespace
characters. When referencing the label in a j** instruction, the
`@` should not be removed.
